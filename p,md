# üìò Product Requirements Document (PRD)

## Product Name
**Visual Web Comic Dubber**

---

## Overview
A browser extension that allows users to hear web comics aloud. It detects **text** from comic images (not just speech bubbles), sends them one by one to a backend API powered by **Google Gemini 2.0 Flash API** for OCR, and uses the **Web Speech API** to read the text with customizable TTS settings.

---

## Goals
- Extract text from comic images using OCR.
- Read the extracted text using browser-native TTS.
- Allow users to configure voice, pitch, and reading speed.
- Handle each image **one by one** for accurate OCR.
- Organize codebase with a clean separation between `extension/` and `backend/`.

---

## Features

### Extension (Frontend)
- üñºÔ∏è Detect and collect comic images from the current webpage.
- üì§ Send each image to the backend individually via HTTP POST.
- üì• Receive extracted text from the backend and queue it.
- üîä Use Web Speech API to:
  - Read each line aloud.
  - Highlight current sentence (optional future enhancement).
- ‚öôÔ∏è User configuration panel:
  - Voice selection (from `speechSynthesis.getVoices()`).
  - Speed (rate), pitch, and volume.

### Backend (Node.js)
- üéØ Accept image uploads.
- üì¶ Process each image using Google Gemini 2.0 Flash API.
- üìù Return extracted text as plain JSON response.
- üõ°Ô∏è Handle rate limits and error fallback gracefully.

---

## Folder Structure

```
/visual-web-comic-dubber
‚îÇ
‚îú‚îÄ‚îÄ extension/              # Chrome extension code
‚îÇ   ‚îú‚îÄ‚îÄ content.js
‚îÇ   ‚îú‚îÄ‚îÄ popup.html
‚îÇ   ‚îú‚îÄ‚îÄ popup.js
‚îÇ   ‚îú‚îÄ‚îÄ settings.js
‚îÇ   ‚îî‚îÄ‚îÄ manifest.json
‚îÇ
‚îú‚îÄ‚îÄ backend/                # Node.js OCR API using Gemini
‚îÇ   ‚îú‚îÄ‚îÄ server.js
‚îÇ   ‚îú‚îÄ‚îÄ ocr.js
‚îÇ   ‚îî‚îÄ‚îÄ .env                # Contains GEMINI_API_KEY
‚îÇ
‚îî‚îÄ‚îÄ README.md
```

---

## Backend OCR Example (`ocr.js`)

```js
const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");
const { GoogleAIFileManager } = require("@google/generative-ai/server");
const fs = require("node:fs");
const mime = require("mime-types");
const express = require("express");
const multer = require("multer");
const path = require("path");
require("dotenv").config();

const app = express();
const upload = multer({ dest: "uploads/" });

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);
const fileManager = new GoogleAIFileManager(apiKey);

const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

async function uploadToGemini(filePath, mimeType) {
  const uploadResult = await fileManager.uploadFile(filePath, {
    mimeType,
    displayName: path.basename(filePath),
  });
  return uploadResult.file;
}

app.post("/ocr", upload.single("image"), async (req, res) => {
  try {
    const mimeType = mime.lookup(req.file.path);
    const geminiFile = await uploadToGemini(req.file.path, mimeType);

    const session = model.startChat({
      generationConfig: {
        temperature: 0.7,
        topP: 0.95,
        maxOutputTokens: 4096,
      },
      history: [
        {
          role: "user",
          parts: [
            {
              fileData: {
                mimeType: geminiFile.mimeType,
                fileUri: geminiFile.uri,
              },
            },
            {
              text: "Extract and return the readable comic dialogue text only.",
            },
          ],
        },
      ],
    });

    const result = await session.sendMessage("Extract text from this comic image.");
    res.json({ text: result.response.text() });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Failed to extract text." });
  }
});

app.listen(3000, () => {
  console.log("OCR server running on http://localhost:3000");
});
```

---

## Extension ‚ûù Backend Example Flow

1. **Content script** grabs all comic images (`img` tags or canvas).
2. Sends each image as FormData to `http://localhost:3000/ocr`.
3. Gets a response like `{ text: "Hey! What are you doing here?" }`.
4. Passes the text to `speechSynthesis.speak()` with user-defined settings.

---

## Future Enhancements
- Character voice assignment (detect speakers and map to voices).
- Highlighting text bubble with mouseover playback.
- Support for multi-language detection & reading.
- Save extracted dialogues as transcripts.
